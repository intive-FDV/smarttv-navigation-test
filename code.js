// Generated by CoffeeScript 1.3.3
(function() {
  var addNavigationData, directionForKey, handleNavigationKey, lastFocused;

  this.VK_LEFT || (this.VK_LEFT = 37);

  this.VK_RIGHT || (this.VK_RIGHT = 39);

  this.VK_UP || (this.VK_UP = 38);

  this.VK_DOWN || (this.VK_DOWN = 40);

  $(document).keydown(function(e) {
    return handleNavigationKey(e.target, e.keyCode);
  });

  handleNavigationKey = function(el, keyCode) {
    var direction, nextElSelector;
    direction = directionForKey(keyCode);
    if (!(el && direction)) {
      return;
    }
    nextElSelector = $(el).data(direction);
    if (nextElSelector) {
      return $(nextElSelector).focus();
    } else {
      return handleNavigationKey(el.parentNode, keyCode);
    }
  };

  directionForKey = function(keyCode) {
    switch (keyCode) {
      case VK_LEFT:
        return 'navLeft';
      case VK_RIGHT:
        return 'navRight';
      case VK_UP:
        return 'navUp';
      case VK_DOWN:
        return 'navDown';
    }
  };

  lastFocused = null;

  $('.menu button').focus(function() {
    return lastFocused = this;
  });

  $('.menu').focus(function() {
    return $(lastFocused || '.menu button:first').focus();
  });

  $('.content').focus(function() {
    return $(this).find('.item:first').focus();
  });

  addNavigationData = function(elements, direction) {
    var el, i, nextDir, prevDir, _i, _len, _results;
    prevDir = direction === 'horizontal' ? 'navLeft' : 'navUp';
    nextDir = direction === 'horizontal' ? 'navRight' : 'navDown';
    _results = [];
    for (i = _i = 0, _len = elements.length; _i < _len; i = ++_i) {
      el = elements[i];
      if (i > 0) {
        $(el).data(prevDir, elements[i - 1]);
      }
      if (i < elements.length - 1) {
        _results.push($(el).data(nextDir, elements[i + 1]));
      } else {
        _results.push(void 0);
      }
    }
    return _results;
  };

  addNavigationData($('.menu button'), 'vertical');

  addNavigationData($('.content .item'), 'horizontal');

  $('.menu').focus();

}).call(this);
